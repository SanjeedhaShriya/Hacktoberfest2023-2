

#SOME BASIC ARRAY PROBLEMS
#INSERTING AT AN INDEX IN AN ARRAY;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
      int arr[] = new int[5];
      int cap = 5; 
      int n =3;
      arr[0] = 3;
      arr[1] = 4;
      arr[2] = 6;
      System.out.println("Before insertion:");
      for(int i =0; i<n; i++){
        System.out.print(arr[i]+ " ");
      }
      
      int x = 7; int pos = 2;
      n = insert(arr,n,x,cap,pos);
      System.out.println("After insertion");
      for(int i =0; i<n; i++){
        System.out.print(arr[i]+ " ");
      }
     
  }
  
  static int insert(int arr[], int n, int x, int cap, int pos){
    if(n==cap){
      return n;
      }
      int index = pos-1;
      for(int i = n-1; i>= index; i--){
      arr[i+1] = arr[i];
    }
     arr[index] = x;
     return n+1;
  }
}

#====================================================================================

#LINEAR SEARCH 

  static int LSearch(int arr[], int x){
    int n = arr.length; 
    for(int i =0; i<n; i++){
      if(arr[i] == x){
        return i;
      }
  
    }
  return -1;
    
  }

#====================================================================================

#LARGEST ELEMENT IN AN ARRAY 

#APPROACH 1:

static int Largest(int[]arr){
    int n = arr.length;
    for(int i =0; i<n; i++){
        boolean flag = true;
    }
    for(int j =0; j<n; j++){
        if(arr[j]>arr[i]){
            flag = false;
            break; 
        }
    }
    if(flag==true){
        return i;
    }
    return -1;
}

#APPROACH 2 : EFFICIENT APPROACH 

static int Largest(int[]arr){
      int n = arr.length;
      int res = 0;
      for(int i =0; i<n; i++){
        if(arr[i]>arr[res]){
          res =i;
        }
        
      }
      return arr[res];
    }

#===================================================================================

#SECOND LARGEST ELEMENT IN AN ARRAY 
#NAIVE APPROACH : TIME COMPL : O(N)

import java.util.*;

public class Main {
    public static void main(String[] args) {
      int[]arr = {12,14,15,142,211,42,135};
      System.out.println(secondLargest(arr));
  }
  
    static int findLargest(int[]arr){
      int res =0;
      for(int i =0; i<arr.length;i++){
        if(arr[i]>arr[res]){
          res=i;
        }
      }
      return res; 
    }
    
    static int secondLargest(int[]arr){
      int largest = findLargest(arr);
      int res = -1;
      for(int i =0; i<arr.length; i++){
        if(arr[i]!=arr[largest]){
          if(res==-1){
            res = i;
          }else if(arr[i]>arr[res]){
            res = i;
          }
        }
        
      }
      return arr[res]; 
    }
}

#EFFICIENT APPROACH :

static int secondLargestEff(int[]arr){
      int res = -1; int largest = 0;
      for(int i =0; i<arr.length;i++){
        if(arr[i]>arr[largest]){
          res = largest;
          largest = i;
        }
        else if(arr[i]!=arr[largest]){
          if(res==-1||arr[i]>arr[res]){
            res = i;
          }
        }

      }
      return res;
    }

#===================================================================================

IS ARRAY SORTED OR NOT 

#APPROACH 1 : NAIVE 
#TC : O(N^2)
#SC : O(1)

static boolean isSortedNaive(int []arr){
      int n = arr.length;
      for(int i =0; i<n; i++){
        for(int j=i+1; j<n; j++){
          if(arr[j]<arr[i]){
            return false;
          }
        }
      }
      return true;
    }

#APPROACH 2 : EFFICIENT 
#TC : O(N)
#SC : O(1)
   static boolean isSortedEff(int[]arr){
      for(int i = 1; i<arr.length;i++){
        if(arr[i-1]>arr[i]){
          return false;
        }
      }
      return true;
    }

#===================================================================================

#REVERSE AN ARRAY : 

public class Main {
    public static void main(String[] args) {
        int [] arr = {12,23,45,23};
        System.out.println("Before Reverse");
        for(int i =0; i<arr.length; i++){
            System.out.print(arr[i]+ " ");
        }
        reverse(arr);
        System.out.println("After Reverse");
        for(int i =0; i<arr.length; i++){
            System.out.print(arr[i]+ " ");
        }
    }

    static void reverse(int[]arr){
        int n = arr.length; 
        int low = 0; int high = n-1;
        while(low<high){
            int temp = arr[low];
            arr[low] = arr[high];
            arr[high] = temp; 
            low++;
            high--;
        }
    }
}

===================================================================================
#REMOVE DUPLICATES IN AN ARRAY 

#APPROACH : EFFICIENT 

import java.util.*;

public class Main {
    public static void main(String[] args) {
      int[]arr = {12,13,13,14,14,15,16,17,17};
      int n = 9;
      System.out.println("Beore Rem");
      for(int i =0; i<n; i++){
        System.out.print(arr[i]+ " ");
      }
      System.out.println("After Removal");
      n = removeDupesEff(arr,n);
      for(int i =0; i<n; i++){
        System.out.print(arr[i]+ " ");
      }
      
  }
  
  static int removeDupesEff(int[]arr, int n){
    int res = 1;
    for(int i =0; i<n; i++){
      if(arr[i]!=arr[res-1]){
        arr[res]=arr[i];
        res++;
      }
    }
    return res; 
  }
}

APPROACH NAIVE :

#===================================================================================

#MOVE ZEROES TO THE END 

 public static void main(String[] args) {
      int[]arr = {7,10,0,4,10,0,5,2,0};
      // leaders(arr);
      pushZeroes(arr);
      for(int i =0; i<arr.length;i++){
        System.out.print(arr[i]+ " ");
      }
      
  }

static void pushZeroes(int[]arr){
    int n = arr.length;
    for(int i = 0; i<n; i++){
      if(arr[i]==0){
        for(int j = i+1; j<n; j++){
          if(arr[j]!=0){
            swap(arr,i,j);
            break;
          }
        }
      }
    }
  }
  
  static void swap(int[]arr, int index1, int index2){
    int temp = arr[index1];
    arr[index1] = arr[index2];
    arr[index2] = temp; 
  }
}


#===================================================================================

#LEADERS IN AN ARRAY 

import java.util.*;

public class Main {
    public static void main(String[] args) {
      int[]arr = {7,10,4,10,5,2};
      leaders(arr);
  }
  
  static void leaders(int[]arr){
    int n = arr.length;
    int curr_leader = arr[n-1];
    System.out.print(curr_leader+ " ");
    for(int i = n-2; i>=0; i--){
      if(curr_leader<arr[i]){
        curr_leader = arr[i];
        System.out.print(curr_leader+" ");
      } 
    }
  }
}
#===================================================================================

#MAX DIFFERENCE PROBLEM WITH ORDER 

#NAIVE APPROACH 
static int maxDiff(int[]arr){
    int n = arr.length; 
    int res = arr[1] - arr[0];
    for(int i =0; i<n-1; i++)
    {
      for(int j = i+1; j<n; j++)
      {
        res = Math.max(res, arr[j]-arr[i]);
      }
    }
  
      return res; 
  }

#EFFICIENT APPROACH 

static int Eff(int[]arr){
    int n = arr.length;
    int res = arr[1] - arr[0];
    int minVal = arr[0];
    for(int i = 1; i<n; i++){
      res = Math.max(res, arr[i]-minVal);
      minVal = Math.min(minVal, arr[i]);
    }
    return res;
  }
  
#===================================================================================

#===================================================================================


#SEARCHING

#1. INDEX OF FIRST OCCURENCE 

 static int firstOcc(int[]arr, int x){
    int n = arr.length;
    int start = 0; int end = n-1;
    while(start<=end){
      int mid = start+(end-start)/2;
      if(arr[mid]<x){
        start = mid+1;
      }else if(arr[mid]>x){
        end = mid-1;
      } else {
        if(mid==0||arr[mid-1]!=arr[mid]){
          return mid;
        } else {
          end = mid-1;
        }
      }
    }
    return -1;
  }

#===================================================================================
#TWO POINTER APPROACH 

public class Main {
    public static void main(String[] args) {
      int[]arr = {1,2,34,45,55,56,57,59};
      int x = 24;
      System.out.println(findPair(arr,x));
  }
  
 static boolean findPair(int[]arr, int x){
    int n = arr.length;
    int i = 0;
    int j = n-1;
    while(i<j){
      if(arr[i]+arr[j]==x){
        return true;
      }
      else if(arr[i]+arr[j]>x){
        j--;
      }else{
        i++;
      }
    }
    return false;
  }
}
